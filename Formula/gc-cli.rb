# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class GcCli < Formula
  desc "GoCardless CLI"
  homepage "https://github.com/gocardless/gc-cli"
  version "0.0.1-rc2"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/gocardless/gc-cli/releases/download/v0.0.1-rc2/gc-cli_0.0.1-rc2_masOS_arm64.tar.gz"
      sha256 "3b40bb2f9a75eca7d4bab16d225bb6d80841e78814974f04e12a74b80941cc5d"

      def install
        bin.install "gc"

        # Install shell auto-completion
        (bash_completion/"gc").write(Utils.popen_read("#{bin}/gc completion bash"))
        (zsh_completion/"_gc").write(Utils.popen_read("#{bin}/gc completion zsh"))
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/gocardless/gc-cli/releases/download/v0.0.1-rc2/gc-cli_0.0.1-rc2_masOS_x86_64.tar.gz"
      sha256 "7261886022760273bfb57c4c1a57c25637d5a96d797565550b0e76df7b9c2775"

      def install
        bin.install "gc"

        # Install shell auto-completion
        (bash_completion/"gc").write(Utils.popen_read("#{bin}/gc completion bash"))
        (zsh_completion/"_gc").write(Utils.popen_read("#{bin}/gc completion zsh"))
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/gocardless/gc-cli/releases/download/v0.0.1-rc2/gc-cli_0.0.1-rc2_Linux_arm64.tar.gz"
      sha256 "31bfb042b11657d2ad5ddd811b61a02f87319506e0b99ca59fdfc6e7663af629"

      def install
        bin.install "gc"

        # Install shell auto-completion
        (bash_completion/"gc").write(Utils.popen_read("#{bin}/gc completion bash"))
        (zsh_completion/"_gc").write(Utils.popen_read("#{bin}/gc completion zsh"))
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/gocardless/gc-cli/releases/download/v0.0.1-rc2/gc-cli_0.0.1-rc2_Linux_x86_64.tar.gz"
      sha256 "f88f1dbdc0351ab700ac30aa127b1a5082c1a22da350b31a26888cd8154d3456"

      def install
        bin.install "gc"

        # Install shell auto-completion
        (bash_completion/"gc").write(Utils.popen_read("#{bin}/gc completion bash"))
        (zsh_completion/"_gc").write(Utils.popen_read("#{bin}/gc completion zsh"))
      end
    end
  end

  def caveats; <<~EOS
    Check https://github.com/gocardless/gc-cli for how to configure the gocardless cli
  EOS
  end
end
